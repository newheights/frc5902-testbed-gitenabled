// Test Bed 2

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5902.robot.subsystems;

import org.usfirst.frc5902.robot.RobotMap;
import org.usfirst.frc5902.robot.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class driveTrain extends Subsystem {
	
	// WM-  *START* Add in Motor Controllers for the 4 motor controller system.

   	public final CANTalon rightDriveFollow = RobotMap.driveTrainrightDriveFollow;
   	public final CANTalon leftDriveFollow = RobotMap.driveTrainleftDriveFollow;
   	// WM-  *END* Add in Motor Controllers for the 4 motor controller system.


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final CANTalon leftDriveLead = RobotMap.driveTrainleftDriveLead;
    public final CANTalon rightDriveLead = RobotMap.driveTrainrightDriveLead;
    
    public final RobotDrive robotDrive = RobotMap.driveTrainrobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
//WM - Make digital Y cable by enabling leaders and followers
   	
   	public driveTrain() {
   		rightDriveLead.changeControlMode(TalonControlMode.PercentVbus);
   		rightDriveFollow.changeControlMode(TalonControlMode.Follower);
   		rightDriveFollow.set(rightDriveLead.getDeviceID());
   		
   		leftDriveLead.changeControlMode(TalonControlMode.PercentVbus);
   		leftDriveFollow.changeControlMode(TalonControlMode.Follower);
   		leftDriveFollow.set(leftDriveLead.getDeviceID());
   		
   		/**
   		 * The following code and comments were written by Brennan Macaig from FRC-1721
   		 * Used with permission. Please leave this attribution comment.
   		 * 
   		 * Written on 3/3/2017
   		 */
   		leftDriveLead.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
   		rightDriveLead.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
   		leftDriveLead.configEncoderCodesPerRev(4096);
   		rightDriveLead.configEncoderCodesPerRev(4096);
   		
   		/**
   		 * To tune these values:
   		 * 1. Tape out 15 feet on the floor
   		 * 2. Get ready to turn on auto
   		 * 3. Get the heck out of the way
   		 * 4. Let 'er rip.
   		 * ---> If a side is spinning in reverse, reverse the sensor (uncomment the line below)
   		 * 5. Crank up the P term until the robot starts oscilating around the tape line.
   		 * 6. Crank up the D term until that stops happening
   		 * 7. Done!
   		 * 
   		 * ---------
   		 * NEVER change the I term
   		 * NEVER change izone
   		 * NEVER change closeloopramprate
   		 * NEVER change the F term
   		 * NEVER change the profile
   		 */
   		double p = .1,
   			   i = 0,
   			   d = .5,
   			   f = 0,
   			   closeloopramprate = 12;
   		int izone = 0,
   			profile = 0;
   		leftDriveLead.setPID(p, i, d, f, izone, closeloopramprate, profile);
   		rightDriveLead.setPID(p, i, d, f, izone, closeloopramprate, profile);
   		
//   		leftDriveLead.reverseSensor(true);
//   		rightDriveLead.reverseSensor(true);
   		
   		/**
   		 * This allows for 10 inches of slop. Should be enough considering we're well over the baseline.
   		 */
   		leftDriveLead.setAllowableClosedLoopErr(2500);
   		rightDriveLead.setAllowableClosedLoopErr(2500);
   		
   		/** <-----------> END THIRD-PARTY CODE <--------------> */
   		
   	}
   	
   	//WM - END making of digital Y cable
   	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new arcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void arcadeDrive(double move, double rotate, double speed) {
    	  robotDrive.arcadeDrive(move*speed, rotate*speed);
    }
    
    public void autonomousDrive(double rotate, double speed) {	
  	  robotDrive.drive(speed, rotate);
  	}
    
    public void driveStraight(double speed) {
    	robotDrive.tankDrive(speed, speed);
    }
    
    public void driveStraightAdjust(double speedL, double speedR) {
		robotDrive.tankDrive(speedL, speedR);
	}
}