// Test Bed 2

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5902.robot.subsystems;

import org.usfirst.frc5902.robot.RobotMap;
import org.usfirst.frc5902.robot.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class driveTrain extends Subsystem {
	
	public final double inchesToSecondsModifier = 25;
	
	// WM-  *START* Add in Motor Controllers for the 4 motor controller system.

   	private final CANTalon rightDriveFollow = RobotMap.driveTrainrightDriveFollow;
   	private final CANTalon leftDriveFollow = RobotMap.driveTrainleftDriveFollow;
   	
   	// WM-  *END* Add in Motor Controllers for the 4 motor controller system.


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftDriveLead = RobotMap.driveTrainleftDriveLead;
    private final CANTalon rightDriveLead = RobotMap.driveTrainrightDriveLead;
    private final RobotDrive robotDrive = RobotMap.driveTrainrobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
//WM - Make digital Y cable by enabling leaders and followers
   	
   	public driveTrain() {
   		rightDriveLead.changeControlMode(TalonControlMode.PercentVbus);
   		rightDriveFollow.changeControlMode(TalonControlMode.Follower);
   		rightDriveFollow.set(rightDriveLead.getDeviceID());
   		
   		leftDriveLead.changeControlMode(TalonControlMode.PercentVbus);
   		leftDriveFollow.changeControlMode(TalonControlMode.Follower);
   		leftDriveFollow.set(leftDriveLead.getDeviceID());
   	}
   	
   	//WM - END making of digital Y cable
   	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new arcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void arcadeDrive(double move, double rotate, double speed) {
    	
    	  robotDrive.arcadeDrive(move*speed, rotate*speed);
    	 
    }
    
    public void driveStraight(double speed) {
    	robotDrive.tankDrive(speed, speed);
    }
    
    //Alows us to compensate for our drift. If we call drivestraight with two arguments then it will call this one left speed and right speed
    public void driveStraightAdjust(double speedL, double speedR) {
		robotDrive.tankDrive(speedL, speedR);
	}
    
}

